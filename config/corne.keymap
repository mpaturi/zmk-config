/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <240>;
    quick-tap-ms = <0>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        spaces {
            bindings = <&kp SPACE>;
            key-positions = <39 40>;
        };

        tab-q--esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };
    };

    behaviors {
        nums_dtap: nums_dtap {
            compatible = "zmk,behavior-tap-dance";
            label = "NUMS_DTAP";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&to 1>;
        };

        nav_dtap: nav_dtap {
            compatible = "zmk,behavior-tap-dance";
            label = "NAV_DTAP";
            #binding-cells = <0>;
            bindings = <&lt 4 SPACE>, <&tog 4>;
        };

        tab_esc_shift: tab_esc_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_ESC_SHIFT";
            #binding-cells = <0>;
            bindings = <&mt ESCAPE TAB>, <&kt LEFT_SHIFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&tab_esc_shift    &mt LS(Q) Q  &mt LS(W) W  &mt LS(E) E  &mt LS(R) R                  &mt LS(T) T    &mt LS(Y) Y          &mt LS(U) U  &mt LS(I) I          &mt LS(O) O            &mt LS(P) P          &mt PRINTSCREEN C_MUTE
&kp RIGHT_ALT     &mt LS(A) A  &mt LS(S) S  &mt LS(D) D  &mt LS(F) F                  &mt LS(G) G    &mt LS(H) H          &mt LS(J) J  &mt LS(K) K          &mt LS(L) L            &mt LS(SLASH) SLASH  &kp RIGHT_WIN
&kp LEFT_CONTROL  &mt LS(Z) Z  &mt LS(X) X  &mt LS(C) C  &mt LS(V) V                  &mt LS(B) B    &mt LS(N) N          &mt LS(M) M  &mt LS(COMMA) COMMA  &mt LS(PERIOD) PERIOD  &mt LS(SQT) SQT      &none
                                            &nums_dtap   &mt LC(BACKSPACE) BACKSPACE  &kp DELETE     &mt LS(ENTER) ENTER  &nav_dtap    &mo 2
            >;
        };

        numandfunc {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp F1                        &kp F2                    &kp F3                  &kp F4                   &kp F5                &kp F6                     &kp F7                &kp F8               &kp F9                       &kp F10                       &kp F11
&trans      &mt LS(EXCLAMATION) NUMBER_1  &mt LS(AT_SIGN) NUMBER_2  &mt LS(POUND) NUMBER_3  &mt LS(DOLLAR) NUMBER_4  &mt LS(PERCENT) N5    &mt CARET NUMBER_6         &mt LS(AMPERSAND) N7  &mt LS(ASTERISK) N8  &mt LS(LEFT_PARENTHESIS) N9  &mt LS(RIGHT_PARENTHESIS) N0  &kp F12
&trans      &mt TILDE GRAVE               &trans                    &kp ASTERISK            &mt UNDER MINUS          &mt PLUS EQUAL        &mt PIPE NON_US_BACKSLASH  &mt SEMI COLON        &kp LESS_THAN        &kp GREATER_THAN             &trans                        &trans
                                                                    &trans                  &trans                   &trans                &trans                     &trans                &trans
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &trans           &trans       &trans    &trans      &trans         &kp LEFT_PARENTHESIS       &kp RIGHT_PARENTHESIS  &mt MINUS UNDER  &mt LEFT_BRACE LEFT_BRACKET  &mt RIGHT_BRACE RIGHT_BRACKET   &kp C_VOLUME_UP
&trans      &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET                  &kp AMPERSAND          &kp ASTERISK     &trans                       &trans                          &kp C_VOL_DN
&trans      &mt TILDE GRAVE  &trans       &trans    &trans      &trans         &mt PIPE NON_US_BACKSLASH  &mt SEMI COLON         &kp LESS_THAN    &kp GREATER_THAN             &mt DOUBLE_QUOTES SINGLE_QUOTE  &trans
                                          &trans    &trans      &trans         &trans                     &trans                 &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &bt BT_CLR    &bt BT_SEL 0  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans        &trans        &trans  &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp PG_UP      &mt LS(HOME) HOME  &kp UP    &mt LS(END) END  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp SPACE      &kp LEFT           &kp DOWN  &kp RIGHT        &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN  &trans             &trans    &trans           &trans  &trans
                        &trans  &trans  &trans    &trans         &trans             &trans
            >;
        };

        ctlfuncs {
            bindings = <
&trans  &trans     &kp LC(W)  &trans     &trans     &kp LC(T)    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(A)  &kp LC(S)  &trans     &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(Z)  &trans     &kp LC(C)  &kp LC(P)  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                              &trans     &trans     &trans       &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Bluetooth {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

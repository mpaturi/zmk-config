/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
};

/ {
    combos {
        compatible = "zmk,combos";

        win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <24 12 25>;
            layers = <0>;
            timeout-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt ESCAPE TAB  &kp Q  &kp W  &kp E  &kp R          &kp T         &kp Y      &kp U      &kp I      &kp O    &kp P           &mt C_MUTE PRINTSCREEN
&kp LCTRL       &kp A  &kp S  &kp D  &kp F          &kp G         &kp H      &kp J      &kp K      &kp L    &kp SLASH       &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C  &kp V          &kp B         &kp N      &kp M      &kp COMMA  &kp DOT  &kp LEFT_ARROW  &kp RIGHT
                              &mo 1  &kp BACKSPACE  &kp DELETE    &kp ENTER  &kp SPACE  &mo 2
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp F1     &kp F2        &kp F3        &kp F4        &kp F5       &kp F6                &kp F7         &kp F8         &kp F9            &kp F10  &kp UP_ARROW
&trans      &kp N1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5       &kp NUMBER_6          &kp N7         &kp N8         &kp N9            &kp N0   &kp DOWN
&trans      &kp GRAVE  &trans        &kp ASTERISK  &kp MINUS     &kp EQUAL    &kp NON_US_BACKSLASH  &kp SEMICOLON  &kp LESS_THAN  &kp GREATER_THAN  &trans   &trans
                                     &mo 1         &trans        &trans       &trans                &trans         &mo 2
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp F11          &kp F12      &trans    &kp LEFT_BRACKET  &kp RIGHT_BRACKET    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS      &kp EQUAL         &kp C_VOLUME_UP    &kp UP
&trans      &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR        &kp PERCENT          &kp CARET             &kp AMPERSAND          &kp ASTERISK   &none             &kp C_VOLUME_DOWN  &kp DOWN
&trans      &kp GRAVE        &trans       &trans    &trans            &trans               &kp NON_US_BACKSLASH  &kp SEMICOLON          &kp LESS_THAN  &kp GREATER_THAN  &trans             &trans
                                          &mo 1     &trans            &trans               &trans                &trans                 &mo 2
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &bt BT_CLR    &bt BT_SEL 0  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans        &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans        &trans        &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Bluetooth {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
